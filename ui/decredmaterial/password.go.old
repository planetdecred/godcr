package decredmaterial

import (
	"image/color"

	"gioui.org/layout"
	"gioui.org/unit"
)

// Password represents a form for collecting and confirming user password
type Password struct {
	theme *Theme

	titleLabel Label

	spendingEditor Editor
	confirmEditor  Editor

	isConfirming bool

	cancelLabelColor            color.RGBA
	createButtonBackgroundColor color.RGBA

	cancelButton Button
	createButton Button

	errorLabel Label
}

// Password initializes and returns an instance of Password
func (t *Theme) Password(isConfirming bool) *Password {
	cancelButtonMaterial := t.Button("Cancel")
	cancelButtonMaterial.Background = t.Color.Surface
	cancelButtonMaterial.Color = t.Color.Primary

	errorLabel := t.Body2("")
	errorLabel.Color = t.Color.Danger

	spendingEditor := t.Editor("Spending password")
	confirmEditor := t.Editor("Confirm spending password")

	confirmEditor.line.Color = t.Color.Primary
	spendingEditor.line.Color = t.Color.Primary

	createButtonText := "Create"
	title := "Create spending password"
	if isConfirming {
		createButtonText = "Confirm"
		title = "Confirm"
	}

	p := &Password{
		theme: t,

		titleLabel: t.H5(title),
		errorLabel: errorLabel,

		isConfirming: isConfirming,

		confirmEditor:  confirmEditor,
		spendingEditor: spendingEditor,
		cancelButton:   cancelButtonMaterial,
		createButton:   t.Button(createButtonText),
	}

	return p
}

func (p *Password) updateColors() {
	p.cancelLabelColor = p.theme.Color.Gray
	p.createButtonBackgroundColor = p.theme.Color.Hint

	if p.isConfirming || (p.bothPasswordsMatch() && p.confirmEditor.Len() > 0) {
		p.createButtonBackgroundColor = p.theme.Color.Primary
	}
}

func (p *Password) processButtonClicks(gtx *layout.Context, confirm func(string), cancel func()) {
	for p.createButton.Clicked(gtx) {
		if p.validate(true) {
			confirm(p.spendingEditor.Text())
			p.Reset()
		}
	}

	for p.cancelButton.Clicked(gtx) {
		p.Reset()
		cancel()
	}
}

// Layout renders the widget to screen. The confirm function passed by the calling page is called when the confirm button
// is clicked, and the form passes validation. The entered password is passed as an argument to the confirm func.
// The cancel func is called when the cancel button is clicked
func (p *Password) Layout(gtx *layout.Context, confirm func(string), cancel func()) {
	p.processButtonClicks(gtx, confirm, cancel)
	p.updateColors()
	p.validate(false)

	widgets := []func(){
		func() {
			p.titleLabel.Layout(gtx)
		},
		func() {
			p.spendingEditor.Layout(gtx)
		},
		func() {
			if !p.isConfirming {
				inset := layout.Inset{
					Top: unit.Dp(20),
				}
				inset.Layout(gtx, func() {
					p.confirmEditor.Layout(gtx)
				})
			}
		},
		func() {
			layout.Flex{Axis: layout.Horizontal}.Layout(gtx,
				layout.Flexed(2, func() {
					p.errorLabel.Layout(gtx)
				}),
				layout.Rigid(func() {
					layout.UniformInset(unit.Dp(10)).Layout(gtx, func() {
						p.cancelButton.Color = p.cancelLabelColor
						p.cancelButton.Layout(gtx)
					})
				}),
				layout.Rigid(func() {
					gtx.Constraints.Width.Min = 70
					layout.UniformInset(unit.Dp(10)).Layout(gtx, func() {
						p.createButton.Background = p.createButtonBackgroundColor
						p.createButton.Layout(gtx)
					})
				}),
			)
		},
	}

	list := layout.List{Axis: layout.Vertical}
	list.Layout(gtx, len(widgets), func(i int) {
		layout.UniformInset(unit.Dp(0)).Layout(gtx, widgets[i])
	})
}

func (p *Password) validate(submitted bool) bool {
	p.errorLabel.Text = ""

	if p.isConfirming && submitted {
		if p.spendingEditor.Len() == 0 {
			p.errorLabel.Text = "Please enter your spending password"
			return false
		}
		return true
	}

	if p.spendingEditor.Len() == 0 || p.confirmEditor.Len() == 0 {
		return false
	}

	if p.spendingEditor.Len() > 0 && p.confirmEditor.Len() > 0 && !p.bothPasswordsMatch() {
		p.errorLabel.Text = "Both passwords do not match"
		return false
	}

	return true
}

func (p *Password) bothPasswordsMatch() bool {
	return p.confirmEditor.Text() == p.spendingEditor.Text()
}

// Reset empties the contents of the password form
func (p *Password) Reset() {
	p.spendingEditor.SetText("")
	p.confirmEditor.SetText("")
}
